'''
dp[a][b][c]
빌딩 a개, 좌측에 b개, 우측에 c개 있는 경우의 수

dp[1][1][1]은 빌딩 1개고 좌우측에서 1개가 보인다. => 1

dp[2][2][1]은 빌딩 2개, 좌측 2개, 우측 1개
1 2 이렇게니까 => 1개
dp[2][1][2]은 빌딩 2개, 좌측 1개, 우측 2개
2 1 이렇게니까 => 1개

dp[l][m][n]의 경우는
dp[l-1][m-1][n]에서 좌측에 보이는 빌딩 하나가 추가되는 경우
dp[l-1][m][n-1]에서 우측에 보이는 빌딩 하나가 추가되는 경우
dp[l-1][m][n]에서 좌우측 아무데나 건물 사이에 하나 추가 되는 경우
세가지 경우가 존재한다

하지만 좌우측에 하나가 추가되는 경우에는
좌우측에서 보이는 빌딩이 증가해야하고,
점차 작은 빌딩을 추가하는 경우이기 때문에 가장 좌우측에 추가된다
그리고 건물 수가 증가되지않는 경우에는 가장 양끝 빼고 나머지에 들어가면 된다.
그 경우에는 l가지 중에 2가지를 뺀 l-2가지가 된다.

따라서 dp[l][m][n] = dp[l-1][m-1][n] + dp[l-1][m][n-1] + dp[l-1][m][n] * (l-2)
'''


n, l, r = map(int, input().split())
num = 1000000007
dp = [[[0 for _ in range(n+1)] for _ in range(n+1)] for _ in range(n+1)]
dp[1][1][1] = 1
for i in range(2, n+1):
    for j in range(1, l+1):
        for k in range(1, r+1):
            dp[i][j][k] = (dp[i-1][j-1][k] + dp[i-1][j][k-1]
                           + dp[i-1][j][k] * (i - 2)) % num

print(dp[n][l][r])
